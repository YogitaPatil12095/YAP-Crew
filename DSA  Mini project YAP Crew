#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h> // For sleep

// Color Definitions
#define RESET   "\x1b[0m"
#define RED     "\x1b[31m"
#define GREEN   "\x1b[32m"
#define BLUE    "\x1b[34m"
#define YELLOW  "\x1b[33m"

struct Account {
    int account_number;
    char name[50];
    float balance;
    struct Account* next;
};

struct Transaction {
    int account_number;
    float amount;
    char type[10];
    struct Transaction* next;
};

struct TransactionQueue {
    struct Transaction* front;
    struct Transaction* rear;
};

#define ACCOUNT_FILE "accounts.dat"
#define TRANSACTION_FILE "transactions.dat"

// Helper Functions
void saveAccounts(struct Account* head) {
    FILE* file = fopen(ACCOUNT_FILE, "wb");
    if (file == NULL) {
        perror(RED "Error saving accounts" RESET);
        return;
    }
    struct Account* temp = head;
    while (temp) {
        fwrite(temp, sizeof(struct Account), 1, file);
        temp = temp->next;
    }
    fclose(file);
}

struct Account* loadAccounts() {
    FILE* file = fopen(ACCOUNT_FILE, "rb");
    if (file == NULL) {
        return NULL; // File might not exist on first run
    }
    struct Account* head = NULL;
    struct Account* temp = NULL;
    struct Account* newAccount = NULL;

    while (1) {
        newAccount = (struct Account*)malloc(sizeof(struct Account));
        if (fread(newAccount, sizeof(struct Account), 1, file) == 0) {
            free(newAccount);
            break;
        }
        newAccount->next = NULL;
        if (head == NULL) {
            head = newAccount;
        } else {
            temp->next = newAccount;
        }
        temp = newAccount;
    }
    fclose(file);
    return head;
}

void saveTransactions(struct TransactionQueue* queue) {
    FILE* file = fopen(TRANSACTION_FILE, "wb");
    if (file == NULL) {
        perror(RED "Error saving transactions" RESET);
        return;
    }
    struct Transaction* temp = queue->front;
    while (temp) {
        fwrite(temp, sizeof(struct Transaction), 1, file);
        temp = temp->next;
    }
    fclose(file);
}

void loadTransactions(struct TransactionQueue* queue) {
    FILE* file = fopen(TRANSACTION_FILE, "rb");
    if (file == NULL) {
        return; // File might not exist on first run
    }
    struct Transaction* temp = NULL;
    struct Transaction* newTransaction = NULL;

    while (1) {
        newTransaction = (struct Transaction*)malloc(sizeof(struct Transaction));
        if (fread(newTransaction, sizeof(struct Transaction), 1, file) == 0) {
            free(newTransaction);
            break;
        }
        newTransaction->next = NULL;
        if (queue->rear == NULL) {
            queue->front = queue->rear = newTransaction;
        } else {
            queue->rear->next = newTransaction;
            queue->rear = newTransaction;
        }
    }
    fclose(file);
}

// Account Number Generator
int generateAccountNumber() {
    static int accountNumber = 1000; // Starts from 1000
    return accountNumber++;
}

// Create Account
struct Account* createAccount(struct Account* head) {
    struct Account* newAccount = (struct Account*)malloc(sizeof(struct Account));
    newAccount->account_number = generateAccountNumber();
    printf(BLUE "Generated Account Number: %d\n" RESET, newAccount->account_number);
    printf("Enter Name: ");
    scanf("%s", newAccount->name);
    newAccount->balance = 0.0;
    newAccount->next = head;
    saveAccounts(newAccount);
    printf(GREEN "Account created successfully!\n" RESET);
    return newAccount;
}

// Display Account
void displayAccount(struct Account* head, int account_number) {
    struct Account* temp = head;
    while (temp != NULL && temp->account_number != account_number) {
        temp = temp->next;
    }
    if (temp != NULL) {
        printf(GREEN "Account Details:\n" RESET);
        printf("Account Number: %d\n", temp->account_number);
        printf("Name: %s\n", temp->name);
        printf("Balance: %.2f\n", temp->balance);
    } else {
        printf(RED "Account not found!\n" RESET);
    }
}

// Delete Account
struct Account* deleteAccount(struct Account* head, int account_number) {
    struct Account* temp = head;
    struct Account* prev = NULL;

    if (temp != NULL && temp->account_number == account_number) {
        head = temp->next;
        free(temp);
        saveAccounts(head);
        printf(GREEN "Account deleted successfully.\n" RESET);
        return head;
    }

    while (temp != NULL && temp->account_number != account_number) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf(RED "Account not found!\n" RESET);
        return head;
    }

    prev->next = temp->next;
    free(temp);
    saveAccounts(head);
    printf(GREEN "Account deleted successfully.\n" RESET);
    return head;
}

// Enqueue Transaction
void enqueue(struct TransactionQueue* q, int account_number, float amount, const char* type) {
    struct Transaction* newTransaction = (struct Transaction*)malloc(sizeof(struct Transaction));
    newTransaction->account_number = account_number;
    newTransaction->amount = amount;
    strcpy(newTransaction->type, type);
    newTransaction->next = NULL;

    if (q->rear == NULL) {
        q->front = q->rear = newTransaction;
    } else {
        q->rear->next = newTransaction;
        q->rear = newTransaction;
    }
}

// Display Transactions
void displayTransactions(struct TransactionQueue* q) {
    struct Transaction* temp = q->front;
    printf(BLUE "Transaction History:\n" RESET);
    if (temp == NULL) {
        printf(RED "No transactions to display.\n" RESET);
        return;
    }
    while (temp != NULL) {
        printf("Account Number: %d, Amount: %.2f, Type: %s\n", temp->account_number, temp->amount, temp->type);
        temp = temp->next;
    }
}

// Deposit
void deposit(struct Account* head, int account_number, float amount, struct TransactionQueue* queue) {
    struct Account* temp = head;
    if (amount <= 0) {
        printf(RED "Invalid amount. Please enter a positive value.\n" RESET);
        return;
    }
    while (temp != NULL && temp->account_number != account_number) {
        temp = temp->next;
    }
    if (temp != NULL) {
        temp->balance += amount;
        printf(GREEN "Deposit Successful. New Balance: %.2f\n" RESET, temp->balance);
        saveAccounts(head);
        enqueue(queue, account_number, amount, "Deposit");
        saveTransactions(queue);
    } else {
        printf(RED "Account not found!\n" RESET);
    }
}

// Withdraw
void withdraw(struct Account* head, int account_number, float amount, struct TransactionQueue* queue) {
    struct Account* temp = head;
    if (amount <= 0) {
        printf(RED "Invalid amount. Please enter a positive value.\n" RESET);
        return;
    }
    while (temp != NULL && temp->account_number != account_number) {
        temp = temp->next;
    }
    if (temp != NULL) {
        if (temp->balance >= amount) {
            temp->balance -= amount;
            printf(GREEN "Withdrawal Successful. New Balance: %.2f\n" RESET, temp->balance);
            saveAccounts(head);
            enqueue(queue, account_number, amount, "Withdraw");
            saveTransactions(queue);
        } else {
            printf(RED "Insufficient Balance!\n" RESET);
        }
    } else {
        printf(RED "Account not found!\n" RESET);
    }
}

// Main Menu Display
void showMainMenu() {
    printf(YELLOW "=====================================\n" RESET);
    printf(BLUE "         BANK MANAGEMENT SYSTEM      \n" RESET);
    printf(YELLOW "=====================================\n" RESET);
    printf("1. Create Account\n");
    printf("2. Display Account\n");
    printf("3. Delete Account\n");
    printf("4. Deposit\n");
    printf("5. Withdraw\n");
    printf("6. Display Transactions\n");
    printf("7. Exit\n");
    printf(YELLOW "=====================================\n" RESET);
}

// Main Menu
void mainmenu() {
    struct Account* head = loadAccounts();
    struct TransactionQueue queue = {NULL, NULL};
    loadTransactions(&queue);

    int choice, account_number;
    float amount;

    while (1) {
        showMainMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                head = createAccount(head);
                break;
            case 2:
                printf("Enter Account Number: ");
                scanf("%d", &account_number);
                displayAccount(head, account_number);
                break;
            case 3:
                printf("Enter Account Number: ");
                scanf("%d", &account_number);
                head = deleteAccount(head, account_number);
                break;
            case 4:
                printf("Enter Account Number: ");
                scanf("%d", &account_number);
                printf("Enter Amount: ");
                scanf("%f", &amount);
                deposit(head, account_number, amount, &queue);
                break;
            case 5:
                printf("Enter Account Number: ");
                scanf("%d", &account_number);
                printf("Enter Amount: ");
                scanf("%f", &amount);
                withdraw(head, account_number, amount, &queue);
                break;
            case 6:
                displayTransactions(&queue);
                break;
            case 7:
                printf(GREEN "Thank you for using the Bank Management System. Goodbye!\n" RESET);
                exit(0);
            default:
                printf(RED "Invalid choice. Please try again.\n" RESET);
        }

    }
}

// Main Function
int main()
{
    char pass[10], password[10] = "YAPCrew";
    printf("\n\n\t\tEnter the password to login: ");
    scanf("%s", pass);
    if (strcmp(pass, password) == 0) {
        printf(GREEN "\nPassword Match!\nLOADING\n" RESET);

        mainmenu();
    } else {
        printf(RED "Wrong Password. Exiting...\n" RESET);
    }
    return 0;
}
