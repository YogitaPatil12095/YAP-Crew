#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Account {
    int account_number;
    char name[50];
    float balance;
    struct Account* next;
} Account;

typedef struct Transaction {
    int account_number;
    float amount;
    char type[10]; // Deposit or Withdraw
    struct Transaction* next;
} Transaction;

typedef struct {
    Transaction* front;
    Transaction* rear;
} TransactionQueue;

void createAccount(Account** head) {
    Account* newAccount = (Account*) malloc(sizeof(Account));
    printf("Enter Account Number: ");
    scanf("%d", &newAccount->account_number);
    printf("Enter Name: ");
    scanf("%s", newAccount->name);
    newAccount->balance = 0.0;
    newAccount->next = *head;
    *head = newAccount;
}

void displayAccount(Account* head, int account_number) {
    Account* temp = head;
    while(temp != NULL && temp->account_number != account_number) {
        temp = temp->next;
    }
    if(temp != NULL) {
        printf("Account Number: %d\n", temp->account_number);
        printf("Name: %s\n", temp->name);
        printf("Balance: %.2f\n", temp->balance);
    } else {
        printf("Account not found!\n");
    }
}

void deleteAccount(Account** head, int account_number) {
    Account* temp = *head;
    Account* prev = NULL;

    if(temp != NULL && temp->account_number == account_number) {
        *head = temp->next;
        free(temp);
        printf("Account deleted successfully.\n");
        return;
    }

    while(temp != NULL && temp->account_number != account_number) {
        prev = temp;
        temp = temp->next;
    }

    if(temp == NULL) {
        printf("Account not found!\n");
        return;
    }

    prev->next = temp->next;
    free(temp);
    printf("Account deleted successfully.\n");
}

void enqueue(TransactionQueue* q, int account_number, float amount, const char* type) {
    Transaction* newTransaction = (Transaction*) malloc(sizeof(Transaction));
    newTransaction->account_number = account_number;
    newTransaction->amount = amount;
    strcpy(newTransaction->type, type);
    newTransaction->next = NULL;

    if(q->rear == NULL) {
        q->front = q->rear = newTransaction;
    } else {
        q->rear->next = newTransaction;
        q->rear = newTransaction;
    }
}

void displayTransactions(TransactionQueue* q) {
    Transaction* temp = q->front;
    while(temp != NULL) {
        printf("Account Number: %d, Amount: %.2f, Type: %s\n", temp->account_number, temp->amount, temp->type);
        temp = temp->next;
    }
}

void deposit(Account* head, int account_number, float amount, TransactionQueue* queue) {
    Account* temp = head;
    while(temp != NULL && temp->account_number != account_number) {
        temp = temp->next;
    }
    if(temp != NULL) {
        temp->balance += amount;
        printf("Deposit Successful. New Balance: %.2f\n", temp->balance);
        enqueue(queue, account_number, amount, "Deposit");
    } else {
        printf("Account not found!\n");
    }
}

void withdraw(Account* head, int account_number, float amount, TransactionQueue* queue) {
    Account* temp = head;
    while(temp != NULL && temp->account_number != account_number) {
        temp = temp->next;
    }
    if(temp != NULL) {
        if(temp->balance >= amount) {
            temp->balance -= amount;
            printf("Withdrawal Successful. New Balance: %.2f\n", temp->balance);
            enqueue(queue, account_number, amount, "Withdraw");
        } else {
            printf("Insufficient Balance!\n");
        }
    } else {
        printf("Account not found!\n");
    }
}

int main() {
    Account* head = NULL;
    TransactionQueue queue = {NULL, NULL};

    int choice, account_number;
    float amount;

    while(1) {
        printf("\n1. Create Account\n2. Display Account\n3. Delete Account\n4. Deposit\n5. Withdraw\n6. Display Transactions\n7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                createAccount(&head);
                break;
            case 2:
                printf("Enter Account Number: ");
                scanf("%d", &account_number);
                displayAccount(head, account_number);
                break;
            case 3:
                printf("Enter Account Number: ");
                scanf("%d", &account_number);
                deleteAccount(&head, account_number);
                break;
            case 4:
                printf("Enter Account Number: ");
                scanf("%d", &account_number);
                printf("Enter Amount: ");
                scanf("%f", &amount);
                deposit(head, account_number, amount, &queue);
                break;
            case 5:
                printf("Enter Account Number: ");
                scanf("%d", &account_number);
                printf("Enter Amount: ");
                scanf("%f", &amount);
                withdraw(head, account_number, amount, &queue);
                break;
            case 6:
                displayTransactions(&queue);
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
